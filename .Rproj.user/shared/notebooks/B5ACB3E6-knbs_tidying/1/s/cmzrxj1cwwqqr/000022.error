{"frames":[{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"pivot_longer(population_mobile_ownership_df, cols = 2:10, names_to = c(\"Number\", \n    \"mobile_ownership\"), names_pattern = \"(.*)-(\\\\d)\", values_to = \"Number\")","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"pivot_longer_spec(data, spec, names_repair = names_repair, values_drop_na = values_drop_na, \n    values_ptypes = values_ptypes)","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"wrap_error_names(vec_cbind(vec_slice(df_out, rows$df_id), vec_slice(keys, \n    rows$key_id), vec_slice(vals, rows$val_id), .name_repair = names_repair))","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"tryCatch(code, vctrs_error_names = function(cnd) {\n    abort(c(\"Failed to create output due to bad names.\", \"Choose another strategy with `names_repair`\"), \n        parent = cnd)\n})","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"tryCatchList(expr, classes, parentenv, handlers)","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"tryCatchOne(expr, names, parentenv, handlers[[1L]])","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"value[[3L]](cond)","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"abort(c(\"Failed to create output due to bad names.\", \"Choose another strategy with `names_repair`\"), \n    parent = cnd)","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"stop(cnd)","line_number":0}],"message":"Error: Failed to create output due to bad names.\nChoose another strategy with `names_repair`\nParents:\n -Names must be unique.\n"}